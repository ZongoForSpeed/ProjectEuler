#include "Problemes.h"
#include "Arithmetiques.h"
#include "Timer.h"

#include <algorithm>
#include <numeric>
#include <iostream>
#include <vector>
#include <boost/multiprecision/cpp_int.hpp>
#include <boost/tuple/tuple.hpp>

typedef unsigned long long nombre;
typedef std::vector<nombre> vecteur;

void probleme001()
{
    // If we list all the natural numbers below 10 that are multiples of 3 or 5, 
    // we get 3, 5, 6 and 9. The sum of these multiples is 23.
    // 
    // Find the sum of all the multiples of 3 or 5 below 1000.
    Timer t ("probleme 1");
    nombre solution = 0;
    for (size_t n = 1; n < 1000; ++n)
    {
        if (n%3 == 0 || n%5 == 0)
            solution += n;
    }
    std::cout << "Solution: " << solution << std::endl;
}

void probleme002()
{
    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
    // By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    // 
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
    // find the sum of the even-valued terms.    
    Timer t ("probleme 2");
    vecteur fibonacci;
    fibonacci.push_back(1);
    fibonacci.push_back(2);
    
    while (fibonacci.back() < 4000000L)
    {
        fibonacci.push_back(fibonacci.back() + fibonacci.at(fibonacci.size() - 2));
    }
    fibonacci.pop_back();
    
    nombre solution = std::accumulate(fibonacci.begin(), fibonacci.end(), 0, [](const nombre & somme, const nombre & f)
    {
        return (f%2 == 0) ? somme + f : somme;
    });
    std::cout << "Solution: " << solution << std::endl;
}

void probleme003()
{
    // The prime factors of 13195 are 5, 7, 13 and 29.
    // 
    // What is the largest prime factor of the number 600851475143 ?
    Timer t ("probleme 3");
    nombre n = 600851475143LL;
    nombre d = 2;
    while (n != 1)
    {
        if (n%d == 0)
            n /= d;
        else
            ++d;
    }
    std::cout << "Solution: " << d << std::endl;
}
void probleme004()
{
    // A palindromic number reads the same both ways. The largest palindrome made from the product 
    // of two 2-digit numbers is 9009 = 91 × 99.
    // 
    // Find the largest palindrome made from the product of two 3-digit numbers.
    Timer t ("probleme 4");
    auto palindrome = [](const nombre & n) -> bool
    {
        std::string s = std::to_string(n);
        return std::equal(s.begin(), s.begin() + s.size()/2, s.rbegin());
    };
    
    nombre solution = 0;
    for (nombre a = 100; a < 1000; ++a)
    {
        for (nombre b = 100; b < a; ++b)
        {
            nombre ab = a*b;
            if (palindrome(ab))
                solution = std::max(solution, ab);
        }
    }
    std::cout << "Solution: " << solution << std::endl;
}

void probleme005()
{
    // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    // 
    // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    Timer t ("probleme 5");
    nombre solution = 2;
    for (nombre d = 3; d < 21; ++d)
    {
        solution = arithmetiques::PPCM(d, solution);
    }
    std::cout << "Solution: " << solution << std::endl;
}

void probleme006()
{
    // The sum of the squares of the first ten natural numbers is, 
    //                                              1² + 2² + ... + 10² = 385
    // The square of the sum of the first ten natural numbers is,
    //                                              (1 + 2 + ... + 10)² = 55² = 3025
    // Hence the difference between the sum of the squares of the first ten natural numbers 
    // and the square of the sum is 3025 − 385 = 2640.
    //
    // Find the difference between the sum of the squares of the first one hundred natural numbers 
    // and the square of the sum.
    Timer t ("probleme 6");
    nombre somme = 0;
    nombre somme_carre = 0;
    for (nombre n = 1; n < 101; ++n)
    {
        somme += n;
        somme_carre += n*n;
    }
    nombre solution = somme*somme - somme_carre;
    std::cout << "Solution: " << solution << std::endl;
}

void probleme007()
{
    // By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    // 
    // What is the 10 001st prime number?
    Timer t("probleme 7");
    vecteur premiers;
    premiers::crible(200000, premiers);
    nombre solution = premiers.at(10000);
    std::cout << "Solution: " << solution << std::endl;
}

void probleme008()
{
    typedef boost::multiprecision::cpp_int nombre;
    // The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    std::string big_number = 
        "73167176531330624919225119674426574742355349194934"
        "96983520312774506326239578318016984801869478851843"
        "85861560789112949495459501737958331952853208805511"
        "12540698747158523863050715693290963295227443043557"
        "66896648950445244523161731856403098711121722383113"
        "62229893423380308135336276614282806444486645238749"
        "30358907296290491560440772390713810515859307960866"
        "70172427121883998797908792274921901699720888093776"
        "65727333001053367881220235421809751254540594752243"
        "52584907711670556013604839586446706324415722155397"
        "53697817977846174064955149290862569321978468622482"
        "83972241375657056057490261407972968652414535100474"
        "82166370484403199890008895243450658541227588666881"
        "16427171479924442928230863465674813919123162824586"
        "17866458359124566529476545682848912883142607690042"
        "24219022671055626321111109370544217506941658960408"
        "07198403850962455444362981230987879927244284909188"
        "84580156166097919133875499200524063689912560717606"
        "05886116467109405077541002256983155200055935729725"
        "71636269561882670428252483600823257530420752963450";
    // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
    // What is the value of this product?
    Timer t("probleme 8");
    auto produit = [&big_number](const size_t & debut, const size_t & fin) -> nombre
    {
        if (debut < fin && fin < big_number.size())
            return std::accumulate(big_number.begin() + debut, 
                                   big_number.begin() + fin, nombre(1), 
                                   [](const nombre & produit, char c) -> nombre { return produit * (c - '0'); }
                                  );
        else
            return 0;
    };
    nombre solution = 0;
    for (size_t n = 13; n < big_number.size(); ++n)
        solution = std::max(solution, produit(n - 13, n));
    std::cout << "Solution: " << solution << std::endl;
}

void probleme009()
{
    // A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a² + b² = c²
    // For example, 3² + 4² = 9 + 16 = 25 = 5².
    //
    // There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    // Find the product abc.
    Timer t("probleme 9");
    auto pythagorean = [](const nombre & limite) -> boost::tuple<nombre, nombre, nombre>
    {
        for (nombre a = 1; a < limite / 3; ++a)
        {
            for (nombre b = a + 1; b < limite / 2; ++b)
            {
                nombre c = limite - a - b;
                if (a*a + b*b == c*c)
                    return boost::tuple<nombre, nombre, nombre>(a,b,c);
            }
        }
        return boost::tuple<nombre, nombre, nombre>(0,0,0);
    };
    nombre a,b,c;
    boost::tie(a, b, c) = pythagorean(1000);
    std::cout << "Solution: " << a*b*c << " (a, b, c) = (" << a << ", " << b << ", " << c << ")" << std::endl;
}

void probleme010()
{
    typedef boost::multiprecision::cpp_int nombre;
    // The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    // 
    // Find the sum of all the primes below two million.
    Timer t("probleme 10");
    vecteur premiers;
    premiers::crible(2000000, premiers);
    nombre solution = std::accumulate(premiers.begin(), premiers.end(), nombre(0));
    std::cout << "Solution: " << solution << std::endl;
}