#include "problemes.h"
#include "polygonal.h"

#include <list>

typedef unsigned long long nombre;
typedef std::vector<nombre> vecteur;

ENREGISTRER_PROBLEME(61, "Cyclical figurate numbers") {
    // Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate 
    // (polygonal) numbers and are generated by the following formulae:
    //
    //  Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
    //  Square          P4,n=n2             1, 4, 9, 16, 25, ...
    //  Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
    //  Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
    //  Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
    //  Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
    //
    // The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
    //
    //  - The set is cyclic, in that the last two digits of each number is the first two digits of the
    //    next number (including the last number with the first).
    //  - Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
    //    is represented by a different number in the set.
    //  - This is the only set of 4-digit numbers with this property.
    //
    // Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
    // triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different 
    // number in the set.
    std::vector<unsigned short> t_polygonal = {3, 4, 5, 6, 7, 8};

    vecteur solution;
    do {
        // std::cout << t_polygonal << std::endl;
        for (nombre n1 = 1010; n1 < 10000; ++n1)
            if (n1 % 100 > 9 && polygonal::est_polygonal(n1, t_polygonal[0]))
                for (nombre n2 = 10; n2 < 100; ++n2)
                    if (polygonal::est_polygonal(n1 % 100 * 100 + n2, t_polygonal[1]))
                        for (nombre n3 = 10; n3 < 100; ++n3)
                            if (polygonal::est_polygonal(n2 % 100 * 100 + n3, t_polygonal[2]))
                                for (nombre n4 = 10; n4 < 100; ++n4)
                                    if (polygonal::est_polygonal(n3 % 100 * 100 + n4, t_polygonal[3]))
                                        for (nombre n5 = 10; n5 < 100; ++n5)
                                            if (polygonal::est_polygonal(n4 % 100 * 100 + n5, t_polygonal[4])) {
                                                const nombre n6 = n1 / 100;
                                                if (polygonal::est_polygonal(n5 % 100 * 100 + n6, t_polygonal[5])) {
                                                    vecteur s = {n1, n1 % 100 * 100 + n2, n2 % 100 * 100 + n3,
                                                                 n3 % 100 * 100 + n4, n4 % 100 * 100 + n5,
                                                                 n5 % 100 * 100 + n6};
                                                    std::sort(s.begin(), s.end());
                                                    solution = s;
                                                }
                                            }
    } while (std::next_permutation(t_polygonal.begin(), t_polygonal.end()) && solution.empty());

    nombre resultat = std::accumulate(solution.begin(), solution.end(), nombre(0));
    return std::to_string(resultat);
}
