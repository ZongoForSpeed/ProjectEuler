#include "problemes.h"
#include "arithmetiques.h"
#include "grand_nombre.h"

typedef std::vector<grand_nombre> vecteur;

namespace 
{
    grand_nombre nombre_facteur(grand_nombre n, grand_nombre p, grand_nombre modulo)
    {
        grand_nombre quotient = n / p;
        grand_nombre resultat = quotient;
        
        while (quotient >= p)
        {
            quotient /= p;
            resultat += quotient;
            resultat %= modulo;
        }
        
        return resultat;
    }
    
    grand_nombre NF(size_t p, size_t q, size_t n)
    {
        const grand_nombre modulo = grand_nombre::puissance(p, n);
        size_t S = 290797;
        
        grand_nombre resultat = 0;
        
        vecteur cache(p, 0);
        for (size_t i = 0; i <= q; ++i)
        {
            size_t T = S%p;
            S = (S*S)%50515093;
            
            if (i < n)
            {
                resultat += nombre_facteur(T*grand_nombre::puissance(p, i), p, modulo);
            }
            else
            {
                if (cache[T] == 0) cache[T] = nombre_facteur(T*modulo, p, modulo);
                resultat += cache[T];
            }
            
            resultat %= modulo;
        }
        
        return resultat;
    }
}


ENREGISTRER_PROBLEME(288, "An enormous factorial")
{
    // For any prime p the number N(p,q) is defined by N(p,q) = ∑n=0 to q Tn*p**n
    // with Tn generated by the following random number generator:
    //
    // S0 = 290797
    // Sn+1 = Sn² mod 50515093
    // Tn = Sn mod p
    // 
    // Let Nfac(p,q) be the factorial of N(p,q).
    // Let NF(p,q) be the number of factors p in Nfac(p,q).
    // 
    // You are given that NF(3,10000) mod 3**20=624955285.
    //
    // Find NF(61,10**7) mod 61**10
    grand_nombre resultat = NF(61, 10000000, 10);
    return resultat.to_string();
}
